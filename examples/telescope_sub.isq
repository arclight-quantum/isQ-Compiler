import std;

/*
* |x>|y> -> |x>|x - y>
* where |x> stores in q[a: a+width] and |y> stores in q[b: b+width].
*/
procedure scalar_sub(qbit q[], int width, int a, int b)
{
    CNOT(q[a:], q[b: b + width]);
    CNOT(q[a + 1:], q[a + 2: a + width]);
    for i in 1:width {
        Toffoli(q[a + i - 1], q[b + i - 1], q[a + i]);
        CNOT(q[a + i], q[b + i]);
    }
    Toffoli(q[a:], q[b:], q[a + 1: a + width]);
    CNOT(q[a + width - 2: a: -1], q[a + width - 1::-1]);
    CNOT(q[a + 1: a + width], q[b + 1:]);
}

/*
* |x_1>|x_2>...|x_n> -> |x_1>|x_2 - x_1>...|x_n - x_{n-1}>
* where |x_k> stores in q[start + k * step: start + k * step + width].
*/
procedure telescope_sub(qbit q[], int width, int start, int step) {
    int len = q.length;
    if (start + step + width > len) {
        return;
    }

    for i in start+step: len-step: step*2 {
        scalar_sub(q, width, i, i + step);
    }
    telescope_sub(q, width, start + width, step * 2);
    for i in start: len-step: step*2 {
        scalar_sub(q, width, i, i + step);
    }
}

/*
* Return the measurement result of q[start: start+width] as an int
* where the lower bits are less siginificant.
*/
int meas(qbit q[], int start, int width) {
    int res = 0;
    int i = start + width - 1;
    while (i >= start) {
        res = res * 2 + M(q[i]);
        i = i - 1;
    }
    return res;
}

procedure main()
{
    int width = 2;
    int n = 4;
    int len = width * n;
    qbit q[len];
    X(q[1:len:width]);
    X(q[2]);
    telescope_sub(q, width, 0, width);
    for i in 0:n {
        print meas(q, i * width, width);
    }
}