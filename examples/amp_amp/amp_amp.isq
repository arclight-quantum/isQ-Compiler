import std;

int n = 10;
int d = 29;

oracle f(10, 1) = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1];

procedure Uf(qbit q[], qbit res) {
    f(q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], res);
}

// error: isqc1: src/ISQ/Lang/TypeCheck.hs:891:21-107: Non-exhaustive patterns in function bool2qbit

// oracle bool f(bool x[10]) {
//     bool res = x[0] && x[1] && x[2] && x[3] && x[4] && x[5] && x[6] && x[7] && x[8] && x[9];
//     return res;
// }

// procedure Uf(qbit q[], qbit res) {
//     f(q, res);
// }


procedure C_Pi(qbit q[], qbit res, qbit anc){
    nctrl<11> X(q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], res, anc);
}

procedure C_Pi_tilt(qbit res, qbit anc) {
    ctrl X(res, anc);
}

// U |0>_q |0>_anc = a |good>_q |1>_res + b |bad>_q |0>_res
// |1>res<1| U |00><00| = |good>_q |1>_res 
procedure U(qbit q[], qbit res) {
    for i in 0:n {
        H(q[i]);
    }
    Uf(q, res);
}

procedure U_deg(qbit q[], qbit res) {
    Uf(q, res);
    for i in 0:n {
        H(q[i]);
    }
}

procedure amp_amp(qbit q[]) {
    qbit anc;
    qbit res;
    double phi[] = {44.45398335410345, -2.4433564705095137, -1.9725578364831746, -0.9239624681369571, -0.924514164920628, -1.3458800092804224, -1.492733619189183, -1.0381974226169999, -4.067252920170617, -1.222365482546138, 0.7297860105901366, -2.202560709737147, -2.105858586937069, -1.00048894567435, -2.442629405589156, -2.4426294055886566, -1.0004889456755377, -2.1058585869391857, 0.9390319438530796, -2.4118066429974836, -1.222365482544803, -4.0672529201687455, -1.0381974226147295, -1.4927336191863814, -1.3458800092790009, -0.9245141649222272, -0.923962468140086, -1.9725578364865815, -2.4433564705125552};
    // 1806.01838 Definition 15 odd
    for i in 0:(d/2) {
        U(q, res);
        C_Pi_tilt(res, anc);
        Rz(phi[d - 2 * i - 1] * 2, anc);
        C_Pi_tilt(res, anc);

        U_deg(q, res);
        C_Pi(q, res, anc);
        Rz(phi[d - 2 * i - 2] * 2, anc);
        C_Pi(q, res, anc);
    }
    U(q, res);
    C_Pi_tilt(res, anc);
    Rz(phi[0] * 2, anc);
    C_Pi_tilt(res, anc);
}

procedure main() {
    qbit q[n];
    amp_amp(q);
    M(q);
}