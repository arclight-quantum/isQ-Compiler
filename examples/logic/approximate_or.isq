/*
* Implement approximate OR function based on paper:
* Høyer, Peter, and Robert Špalek. "Quantum fan-out is powerful." Theory of computing 1, no. 1 (2005): 81-103.
*/

import std;

procedure hamming_rx(double phi, qbit x[], qbit q) {
    int n = x.length - 1;
    qbit anc[n];
    for i in 0:n {
        CNOT(q, anc[i]);
        ctrl Rz(phi, x[i], anc[i]);
    }
    ctrl Rz(phi, x[n], q);
    for i in 0:n {
        CNOT(q, anc[i]);
    }
}

procedure mu(double phi, qbit x[], qbit q) {
    H(q);
    hamming_rx(phi, x, q);
    H(q);
}

int log_ceil(int v) {
    if (v < 1) {
        return -1;
    }
    int res = 0;
    while (v > 1) {
        v = (v + 1) / 2;
        res += 1;
    }
    return res;
}

/*
* Decide whether all the bits of @x are 0.
*
* If true, @res is untouched; otherwise, an X gate is applied to @res,
* with an error rate of O(1/n). Error means no X gate ia applied.
*/
procedure approx_or(qbit x[], qbit res) {
    int n = x.length;
    int m = log_ceil(n + 1) * n;
    qbit anc[m * n];
    qbit y[m];
    double phi = 2 * pi / m;

    for i in 0:m {
        for j in 0:n {
            CNOT(x[j], anc[i * n + j]);
        }
        mu(phi * i, anc[i*n: i*n+n], y[i]);
        for j in 0:n {
            CNOT(x[j], anc[i * n + j]);
        }
    }
    mu(phi, y[0:m], res);

    // Uncompute to free ancillary qubits
    for i in 0:m {
        for j in 0:n {
            CNOT(x[j], anc[i * n + j]);
        }
        mu(-phi * i, anc[i*n: i*n+n], y[i]);
        for j in 0:n {
            CNOT(x[j], anc[i * n + j]);
        }
    }
}

procedure main()
{
    int size = 2;
    qbit x[size];
    X(x);
    qbit q;
    approx_or(x, q);
    print M(q);
}