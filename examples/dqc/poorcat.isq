import std;
import qmpi;
import lib;

int parent(int rank){
    return (rank-1)/2;
}
int lchild(int rank){
    return (rank*2)+1;
}
int rchild(int rank){
    return (rank*2)+2;
}
int layer(int rank){
    int l=0;
    while(rank!=0){
        rank = parent(rank);
        l=l+1;
    }
    return l;
}
procedure assert(bool cond, int errno, int n){
    if(!cond){
        print(errno * 1000000 + n);
    }
}
procedure compute_parity_parent(qbit q, int child){
    remote_cx_src(q, child);
}
procedure compute_parity_child(qbit q, qbit middle, int p){
    CNOT(q, middle);
    remote_cx_tgt(middle, p);
}
procedure collect_parity_parent(int child, bool acc[]){
    int tag = 11;
    if(qmpi_crecv(child, tag)){
        acc[0] = !acc[0];
    }
    
}
procedure collect_parity_child(qbit q, int rank,  bool acc[], bool acc_next){
    int tag = 11;
    if(acc[0]){
        X(q);
    }
    if(acc_next){
        acc[0] = !acc[0];
    } 
    if(rank!=0) {
        int p = parent(rank);
        qmpi_csend(acc[0], p, tag);
    }
}

procedure main(){
    int size = qmpi_size();
    qbit me;
    poor_man_cat_state(qmpi_comm_rank(), size, me);
    print M(me);
}