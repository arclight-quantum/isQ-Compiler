import std;
import qmpi;
import lib;

procedure main()
{
    int rank = qmpi_comm_rank();
    qbit psi;
    psi = |0>;

    // Prepare the source state
    int root = 2;
    if (rank == root) {
        H(psi);
        Ry(pi/4, psi);
    }

    // Broadcast psi from node 0 to the other nodes
    qmpi_bcast(psi, root);

    // Verify the broadcast result
    qmpi_barrier();
    if (rank == root) {
        bp;
    }
    qmpi_barrier();

    int size = qmpi_size();
    int tag = 29;
    if (rank == root) {
        int count = 0;
        for i in 0:size {
            if (i != root) {
                if (qmpi_crecv(i, tag)) {
                    count += 1;
                }
            }
        }
        if (count % 2 == 1) {
            Z(psi);
        }
        bp;
    } else {
        H(psi);
        qmpi_csend(M(psi), root, tag);
    }
}