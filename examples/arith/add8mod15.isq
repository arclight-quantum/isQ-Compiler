package arith;

import std;
import arith.add_const;
import arith.carrier;

procedure add8mod15(qbit a0, qbit a1, qbit a2, qbit a3) {
    qbit b0, b1, b2, b3, c;

    // set b = |9>
    X(b3);
    X(b0);

    // Test whether a + 8 >= 15
    carrier4(a0, a1, a2, a3, b0, b1, b2, b3, c);

    // If true, add 8 then subtract 15, i.e., subtract 7, i.e., add 9
    ctrl add9(c, a0, a1, a2, a3);

    // If false, add 8 directly
    X(c);
    ctrl add8(c, a0, a1, a2, a3);

    // Uncompute
    X(b0);
    carrier4(a0, a1, a2, a3, b0, b1, b2, b3, c);
    X(b3);
} deriving gate

procedure main()
{
    qbit q[4];
    for i in 0:16 {
        set(q, i);
        add8mod15(q[0], q[1], q[2], q[3]);
        print M(q);
        inv add8mod15(q[0], q[1], q[2], q[3]);
        set(q, i);
        print M(q);
    }
}