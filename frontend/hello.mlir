{"Right":"module{\n    isq.declare_qop @__isq__builtin__measure : [1]()->i1\n    isq.declare_qop @__isq__builtin__reset : [1]()->()\n    isq.declare_qop @__isq__builtin__bp : [0](index)->()\n    isq.declare_qop @__isq__builtin__print_int : [0](index)->()\n    isq.declare_qop @__isq__builtin__print_double : [0](f64)->()\n    func @\"__isq__main\"(memref<?xindex>, memref<?xf64>) \n    {\n    ^entry(%ssa_2: memref<?xindex>, %ssa_3: memref<?xf64>):\n        %ssa_4 = arith.constant 0 : i1 loc(\"/dev/pts/2\":0:1)\n        %ssa_5_real = memref.alloc() : memref<1xi1> loc(\"/dev/pts/2\":0:1)\n        %ssa_5_zero = arith.constant 0 : index\n        %ssa_5 = memref.subview %ssa_5_real[%ssa_5_zero][1][1] : memref<1xi1> to memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc(\"/dev/pts/2\":0:1)\n        %ssa_4_store_zero = arith.constant 0: index loc(\"/dev/pts/2\":0:1)\n        affine.store %ssa_4, %ssa_5[%ssa_4_store_zero] : memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc(\"/dev/pts/2\":0:1)\n        br ^exit_1 \n    ^exit_1:\n        isq.accumulate_gphase %ssa_5_real : memref<1xi1> loc(\"/dev/pts/2\":0:1)\n        memref.dealloc %ssa_5_real : memref<1xi1> loc(\"/dev/pts/2\":0:1)\n        br ^exit \n    ^exit:\n        return loc(\"/dev/pts/2\":0:1)\n    } loc(\"/dev/pts/2\":0:1)\n    func @\"__isq__global_initialize\"() \n    {\n    ^block1:\n        return \n    } \n    func @\"__isq__global_finalize\"() \n    {\n    ^block1:\n        return \n    } \n    func @\"__isq__entry\"(memref<?xindex>, memref<?xf64>) \n    {\n    ^block1(%ssa_1: memref<?xindex>, %ssa_2: memref<?xf64>):\n        call @\"__isq__global_initialize\"() : ()->() \n        call @\"__isq__main\"(%ssa_1, %ssa_2) : (memref<?xindex>, memref<?xf64>)->() \n        call @\"__isq__global_finalize\"() : ()->() \n        return \n    } \n}"}