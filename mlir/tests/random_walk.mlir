module{
    isq.declare_qop @__isq__builtin__measure : [1]()->i1
    isq.declare_qop @__isq__builtin__reset : [1]()->()
    isq.declare_qop @__isq__builtin__bp : [0](index)->()
    isq.declare_qop @__isq__builtin__print_int : [0](index)->()
    isq.declare_qop @__isq__builtin__print_double : [0](f64)->()
    isq.declare_qop @__isq__qmpiprim__me : [0]()->index
    isq.declare_qop @__isq__qmpiprim__size : [0]()->index
    isq.declare_qop @__isq__qmpiprim__epr : [1](index)->()
    isq.declare_qop @__isq__qmpiprim__csend : [0](i1, index)->()
    isq.declare_qop @__isq__qmpiprim__crecv : [0](index)->i1
    func.func @"__isq__main"(memref<?xindex>, memref<?xf64>) 
    {
    ^entry(%ssa_20: memref<?xindex>, %ssa_21: memref<?xf64>):
        %ssa_22 = arith.constant 0 : i1 loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        %ssa_23_real = memref.alloc() : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        %ssa_23_zero = arith.constant 0 : index
        %ssa_23 = memref.subview %ssa_23_real[%ssa_23_zero][1][1] : memref<1xi1> to memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        %ssa_22_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        affine.store %ssa_22, %ssa_23[%ssa_22_store_zero] : memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        %ssa_24 = memref.alloc() : memref<2x!isq.qstate> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":25:5)
        %ssa_25 = memref.alloc() : memref<4x!isq.qstate> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":26:5)
        %ssa_26 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:14)
        %ssa_27 = arith.constant 10 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:16)
        affine.for %ssa_30 = %ssa_26 to %ssa_27 step 1 {
            scf.execute_region {
            ^entry:
                %ssa_31 = arith.constant 0 : i1 loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                %ssa_32_real = memref.alloc() : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                %ssa_32_zero = arith.constant 0 : index
                %ssa_32 = memref.subview %ssa_32_real[%ssa_32_zero][1][1] : memref<1xi1> to memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                %ssa_31_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                affine.store %ssa_31, %ssa_32[%ssa_31_store_zero] : memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                %ssa_33 = arith.constant 0 : i1 loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                %ssa_34_real = memref.alloc() : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                %ssa_34_zero = arith.constant 0 : index
                %ssa_34 = memref.subview %ssa_34_real[%ssa_34_zero][1][1] : memref<1xi1> to memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                %ssa_33_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                affine.store %ssa_33, %ssa_34[%ssa_33_store_zero] : memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                scf.execute_region {
                ^entry:
                    %ssa_38 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:16)
                    %ssa_39 = memref.subview %ssa_24[%ssa_38][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:15)
                    %ssa_36 = isq.use @"std.H" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:9) 
                    %ssa_36_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:9)
                    %ssa_36_in_1 = affine.load %ssa_39[%ssa_36_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:9)
                    %ssa_36_out_1 = isq.apply %ssa_36(%ssa_36_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:9)
                    %ssa_36_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:9)
                    affine.store %ssa_36_out_1, %ssa_39[%ssa_36_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":31:9)
                    %ssa_43 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:16)
                    %ssa_44 = memref.subview %ssa_24[%ssa_43][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:15)
                    %ssa_41 = isq.use @"std.H" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:9) 
                    %ssa_41_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:9)
                    %ssa_41_in_1 = affine.load %ssa_44[%ssa_41_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:9)
                    %ssa_41_out_1 = isq.apply %ssa_41(%ssa_41_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:9)
                    %ssa_41_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:9)
                    affine.store %ssa_41_out_1, %ssa_44[%ssa_41_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":32:9)
                    %ssa_48 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:16)
                    %ssa_49 = memref.subview %ssa_24[%ssa_48][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:15)
                    %ssa_46 = isq.use @"std.Z" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:9) 
                    %ssa_46_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:9)
                    %ssa_46_in_1 = affine.load %ssa_49[%ssa_46_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:9)
                    %ssa_46_out_1 = isq.apply %ssa_46(%ssa_46_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:9)
                    %ssa_46_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:9)
                    affine.store %ssa_46_out_1, %ssa_49[%ssa_46_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":33:9)
                    %ssa_53 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:16)
                    %ssa_54 = memref.subview %ssa_24[%ssa_53][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:15)
                    %ssa_51 = isq.use @"std.Z" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:9) 
                    %ssa_51_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:9)
                    %ssa_51_in_1 = affine.load %ssa_54[%ssa_51_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:9)
                    %ssa_51_out_1 = isq.apply %ssa_51(%ssa_51_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:9)
                    %ssa_51_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:9)
                    affine.store %ssa_51_out_1, %ssa_54[%ssa_51_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":34:9)
                    %ssa_58 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:17)
                    %ssa_59 = memref.subview %ssa_24[%ssa_58][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:16)
                    %ssa_61 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:26)
                    %ssa_62 = memref.subview %ssa_24[%ssa_61][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:25)
                    %ssa_56 = isq.use @"std.CZ" : !isq.gate<2> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9) 
                    %ssa_56_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_56_in_1 = affine.load %ssa_59[%ssa_56_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_56_in_2_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_56_in_2 = affine.load %ssa_62[%ssa_56_in_2_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_56_out_1, %ssa_56_out_2 = isq.apply %ssa_56(%ssa_56_in_1, %ssa_56_in_2) : !isq.gate<2> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_56_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    affine.store %ssa_56_out_1, %ssa_59[%ssa_56_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_56_out_2_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    affine.store %ssa_56_out_2, %ssa_62[%ssa_56_out_2_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":35:9)
                    %ssa_66 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:16)
                    %ssa_67 = memref.subview %ssa_24[%ssa_66][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:15)
                    %ssa_64 = isq.use @"std.H" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:9) 
                    %ssa_64_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:9)
                    %ssa_64_in_1 = affine.load %ssa_67[%ssa_64_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:9)
                    %ssa_64_out_1 = isq.apply %ssa_64(%ssa_64_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:9)
                    %ssa_64_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:9)
                    affine.store %ssa_64_out_1, %ssa_67[%ssa_64_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":36:9)
                    %ssa_71 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:16)
                    %ssa_72 = memref.subview %ssa_24[%ssa_71][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:15)
                    %ssa_69 = isq.use @"std.H" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:9) 
                    %ssa_69_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:9)
                    %ssa_69_in_1 = affine.load %ssa_72[%ssa_69_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:9)
                    %ssa_69_out_1 = isq.apply %ssa_69(%ssa_69_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:9)
                    %ssa_69_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:9)
                    affine.store %ssa_69_out_1, %ssa_72[%ssa_69_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":37:9)
                    %ssa_76 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:22)
                    %ssa_77 = memref.subview %ssa_24[%ssa_76][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:21)
                    %ssa_79 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:31)
                    %ssa_80 = memref.subview %ssa_24[%ssa_79][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:30)
                    %ssa_82 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:41)
                    %ssa_83 = memref.subview %ssa_25[%ssa_82][1][1] : memref<4x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:40)
                    %ssa_74 = isq.use @"std.Toffoli" : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9) 
                    %ssa_74_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_in_1 = affine.load %ssa_77[%ssa_74_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_in_2_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_in_2 = affine.load %ssa_80[%ssa_74_in_2_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_in_3_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_in_3 = affine.load %ssa_83[%ssa_74_in_3_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_out_1, %ssa_74_out_2, %ssa_74_out_3 = isq.apply %ssa_74(%ssa_74_in_1, %ssa_74_in_2, %ssa_74_in_3) : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    affine.store %ssa_74_out_1, %ssa_77[%ssa_74_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_out_2_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    affine.store %ssa_74_out_2, %ssa_80[%ssa_74_out_2_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_74_out_3_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    affine.store %ssa_74_out_3, %ssa_83[%ssa_74_out_3_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":39:9)
                    %ssa_87 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:16)
                    %ssa_88 = memref.subview %ssa_24[%ssa_87][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:15)
                    %ssa_85 = isq.use @"std.X" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:9) 
                    %ssa_85_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:9)
                    %ssa_85_in_1 = affine.load %ssa_88[%ssa_85_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:9)
                    %ssa_85_out_1 = isq.apply %ssa_85(%ssa_85_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:9)
                    %ssa_85_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:9)
                    affine.store %ssa_85_out_1, %ssa_88[%ssa_85_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":40:9)
                    %ssa_92 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:22)
                    %ssa_93 = memref.subview %ssa_24[%ssa_92][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:21)
                    %ssa_95 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:31)
                    %ssa_96 = memref.subview %ssa_24[%ssa_95][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:30)
                    %ssa_98 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:41)
                    %ssa_99 = memref.subview %ssa_25[%ssa_98][1][1] : memref<4x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:40)
                    %ssa_90 = isq.use @"std.Toffoli" : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9) 
                    %ssa_90_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_in_1 = affine.load %ssa_93[%ssa_90_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_in_2_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_in_2 = affine.load %ssa_96[%ssa_90_in_2_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_in_3_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_in_3 = affine.load %ssa_99[%ssa_90_in_3_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_out_1, %ssa_90_out_2, %ssa_90_out_3 = isq.apply %ssa_90(%ssa_90_in_1, %ssa_90_in_2, %ssa_90_in_3) : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    affine.store %ssa_90_out_1, %ssa_93[%ssa_90_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_out_2_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    affine.store %ssa_90_out_2, %ssa_96[%ssa_90_out_2_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_90_out_3_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    affine.store %ssa_90_out_3, %ssa_99[%ssa_90_out_3_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":41:9)
                    %ssa_103 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:16)
                    %ssa_104 = memref.subview %ssa_24[%ssa_103][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:15)
                    %ssa_101 = isq.use @"std.X" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:9) 
                    %ssa_101_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:9)
                    %ssa_101_in_1 = affine.load %ssa_104[%ssa_101_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:9)
                    %ssa_101_out_1 = isq.apply %ssa_101(%ssa_101_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:9)
                    %ssa_101_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:9)
                    affine.store %ssa_101_out_1, %ssa_104[%ssa_101_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":42:9)
                    %ssa_108 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:16)
                    %ssa_109 = memref.subview %ssa_24[%ssa_108][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:15)
                    %ssa_106 = isq.use @"std.X" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:9) 
                    %ssa_106_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:9)
                    %ssa_106_in_1 = affine.load %ssa_109[%ssa_106_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:9)
                    %ssa_106_out_1 = isq.apply %ssa_106(%ssa_106_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:9)
                    %ssa_106_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:9)
                    affine.store %ssa_106_out_1, %ssa_109[%ssa_106_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":43:9)
                    %ssa_113 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:22)
                    %ssa_114 = memref.subview %ssa_24[%ssa_113][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:21)
                    %ssa_116 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:31)
                    %ssa_117 = memref.subview %ssa_24[%ssa_116][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:30)
                    %ssa_119 = arith.constant 2 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:41)
                    %ssa_120 = memref.subview %ssa_25[%ssa_119][1][1] : memref<4x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:40)
                    %ssa_111 = isq.use @"std.Toffoli" : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9) 
                    %ssa_111_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_in_1 = affine.load %ssa_114[%ssa_111_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_in_2_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_in_2 = affine.load %ssa_117[%ssa_111_in_2_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_in_3_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_in_3 = affine.load %ssa_120[%ssa_111_in_3_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_out_1, %ssa_111_out_2, %ssa_111_out_3 = isq.apply %ssa_111(%ssa_111_in_1, %ssa_111_in_2, %ssa_111_in_3) : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    affine.store %ssa_111_out_1, %ssa_114[%ssa_111_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_out_2_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    affine.store %ssa_111_out_2, %ssa_117[%ssa_111_out_2_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_111_out_3_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    affine.store %ssa_111_out_3, %ssa_120[%ssa_111_out_3_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":44:9)
                    %ssa_124 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:16)
                    %ssa_125 = memref.subview %ssa_24[%ssa_124][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:15)
                    %ssa_122 = isq.use @"std.X" : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:9) 
                    %ssa_122_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:9)
                    %ssa_122_in_1 = affine.load %ssa_125[%ssa_122_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:9)
                    %ssa_122_out_1 = isq.apply %ssa_122(%ssa_122_in_1) : !isq.gate<1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:9)
                    %ssa_122_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:9)
                    affine.store %ssa_122_out_1, %ssa_125[%ssa_122_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":45:9)
                    %ssa_129 = arith.constant 0 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:22)
                    %ssa_130 = memref.subview %ssa_24[%ssa_129][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:21)
                    %ssa_132 = arith.constant 1 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:31)
                    %ssa_133 = memref.subview %ssa_24[%ssa_132][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:30)
                    %ssa_135 = arith.constant 3 : index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:40)
                    %ssa_136 = memref.subview %ssa_24[%ssa_135][1][1] : memref<2x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:39)
                    %ssa_127 = isq.use @"std.Toffoli" : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9) 
                    %ssa_127_in_1_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_in_1 = affine.load %ssa_130[%ssa_127_in_1_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_in_2_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_in_2 = affine.load %ssa_133[%ssa_127_in_2_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_in_3_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_in_3 = affine.load %ssa_136[%ssa_127_in_3_load_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_out_1, %ssa_127_out_2, %ssa_127_out_3 = isq.apply %ssa_127(%ssa_127_in_1, %ssa_127_in_2, %ssa_127_in_3) : !isq.gate<3> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_out_1_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    affine.store %ssa_127_out_1, %ssa_130[%ssa_127_out_1_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_out_2_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    affine.store %ssa_127_out_2, %ssa_133[%ssa_127_out_2_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    %ssa_127_out_3_store_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    affine.store %ssa_127_out_3, %ssa_136[%ssa_127_out_3_store_zero] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":46:9)
                    cf.br ^exit 
                ^exit:
                    scf.yield loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                } loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                %ssa_138_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                %ssa_138 = affine.load %ssa_32[%ssa_138_load_zero] : memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                cf.cond_br %ssa_138, ^exit_2, ^block1 loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
            ^block1:
                cf.br ^exit_2 
            ^exit_2:
                isq.accumulate_gphase %ssa_34_real : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                memref.dealloc %ssa_34_real : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:18)
                cf.br ^exit_1 
            ^exit_1:
                isq.accumulate_gphase %ssa_32_real : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                memref.dealloc %ssa_32_real : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
                cf.br ^exit 
            ^exit:
                scf.yield loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
            } loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
        } loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
        %ssa_140_load_zero = arith.constant 0: index loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
        %ssa_140 = affine.load %ssa_23[%ssa_140_load_zero] : memref<1xi1, affine_map<(d0)[s0]->(d0+s0)>> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
        cf.cond_br %ssa_140, ^exit_3, ^block1 loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":27:5)
    ^block1:
        cf.br ^exit_3 
    ^exit_3:
        isq.accumulate_gphase %ssa_25 : memref<4x!isq.qstate> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":26:5)
        memref.dealloc %ssa_25 : memref<4x!isq.qstate> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":26:5)
        cf.br ^exit_2 
    ^exit_2:
        isq.accumulate_gphase %ssa_24 : memref<2x!isq.qstate> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":25:5)
        memref.dealloc %ssa_24 : memref<2x!isq.qstate> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":25:5)
        cf.br ^exit_1 
    ^exit_1:
        isq.accumulate_gphase %ssa_23_real : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        memref.dealloc %ssa_23_real : memref<1xi1> loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
        cf.br ^exit 
    ^exit:
        return loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
    } loc("/home/gjz010/isQ-Compiler/examples/random_walk.isq":24:1)
    func.func private @"__quantum__qis__rz__body"(f64, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":0:1)
    isq.defgate @"Rz"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__rz__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":0:1)
    isq.defgate @"std.Rz"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__rz__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":0:1)
    func.func private @"__quantum__qis__rx__body"(f64, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":1:1)
    isq.defgate @"Rx"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__rx__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":1:1)
    isq.defgate @"std.Rx"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__rx__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":1:1)
    func.func private @"__quantum__qis__ry__body"(f64, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":2:1)
    isq.defgate @"Ry"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__ry__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":2:1)
    isq.defgate @"std.Ry"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__ry__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":2:1)
    func.func private @"__quantum__qis__u3"(f64, f64, f64, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":3:1)
    isq.defgate @"U3"(f64, f64, f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__u3">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":3:1)
    isq.defgate @"std.U3"(f64, f64, f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__u3">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":3:1)
    func.func private @"__quantum__qis__h__body"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":4:1)
    isq.defgate @"H" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__h__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":4:1)
    isq.defgate @"std.H" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__h__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":4:1)
    func.func private @"__quantum__qis__s__body"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":5:1)
    isq.defgate @"S" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__s__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":5:1)
    isq.defgate @"std.S" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__s__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":5:1)
    func.func private @"__quantum__qis__t__body"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":6:1)
    isq.defgate @"T" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__t__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":6:1)
    isq.defgate @"std.T" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__t__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":6:1)
    func.func private @"__quantum__qis__x__body"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":7:1)
    isq.defgate @"X" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__x__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":7:1)
    isq.defgate @"std.X" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__x__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":7:1)
    func.func private @"__quantum__qis__y__body"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":8:1)
    isq.defgate @"Y" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__y__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":8:1)
    isq.defgate @"std.Y" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__y__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":8:1)
    func.func private @"__quantum__qis__z__body"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":9:1)
    isq.defgate @"Z" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__z__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":9:1)
    isq.defgate @"std.Z" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__z__body">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":9:1)
    func.func private @"__quantum__qis__cnot"(!isq.qir.qubit, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":10:1)
    isq.defgate @"CNOT" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__cnot">]}: !isq.gate<2> loc("/home/gjz010/isQ-Compiler/lib/std.isq":10:1)
    isq.defgate @"std.CNOT" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__cnot">]}: !isq.gate<2> loc("/home/gjz010/isQ-Compiler/lib/std.isq":10:1)
    func.func private @"__quantum__qis__toffoli"(!isq.qir.qubit, !isq.qir.qubit, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":11:1)
    isq.defgate @"Toffoli" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__toffoli">]}: !isq.gate<3> loc("/home/gjz010/isQ-Compiler/lib/std.isq":11:1)
    isq.defgate @"std.Toffoli" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__toffoli">]}: !isq.gate<3> loc("/home/gjz010/isQ-Compiler/lib/std.isq":11:1)
    func.func private @"__quantum__qis__x2m"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":12:1)
    isq.defgate @"X2M" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__x2m">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":12:1)
    isq.defgate @"std.X2M" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__x2m">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":12:1)
    func.func private @"__quantum__qis__x2p"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":13:1)
    isq.defgate @"X2P" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__x2p">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":13:1)
    isq.defgate @"std.X2P" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__x2p">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":13:1)
    func.func private @"__quantum__qis__y2m"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":14:1)
    isq.defgate @"Y2M" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__y2m">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":14:1)
    isq.defgate @"std.Y2M" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__y2m">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":14:1)
    func.func private @"__quantum__qis__y2p"(!isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":15:1)
    isq.defgate @"Y2P" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__y2p">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":15:1)
    isq.defgate @"std.Y2P" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__y2p">]}: !isq.gate<1> loc("/home/gjz010/isQ-Compiler/lib/std.isq":15:1)
    func.func private @"__quantum__qis__cz"(!isq.qir.qubit, !isq.qir.qubit) loc("/home/gjz010/isQ-Compiler/lib/std.isq":16:1)
    isq.defgate @"CZ" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__cz">]}: !isq.gate<2> loc("/home/gjz010/isQ-Compiler/lib/std.isq":16:1)
    isq.defgate @"std.CZ" {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__cz">]}: !isq.gate<2> loc("/home/gjz010/isQ-Compiler/lib/std.isq":16:1)
    func.func private @"__quantum__qis__gphase"(f64) loc("/home/gjz010/isQ-Compiler/lib/std.isq":17:1)
    isq.defgate @"GPhase"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__gphase">]}: !isq.gate<0> loc("/home/gjz010/isQ-Compiler/lib/std.isq":17:1)
    isq.defgate @"std.GPhase"(f64) {definition = [#isq.gatedef<type = "qir", value = @"__quantum__qis__gphase">]}: !isq.gate<0> loc("/home/gjz010/isQ-Compiler/lib/std.isq":17:1)
    func.func @"__isq__global_initialize"() 
    {
    ^block1:
        return 
    } 
    func.func @"__isq__global_finalize"() 
    {
    ^block1:
        return 
    } 
    func.func @"__isq__entry"(memref<?xindex>, memref<?xf64>) 
    {
    ^block1(%ssa_1: memref<?xindex>, %ssa_2: memref<?xf64>):
        func.call @"__isq__global_initialize"() : ()->() 
        func.call @"__isq__main"(%ssa_1, %ssa_2) : (memref<?xindex>, memref<?xf64>)->() 
        func.call @"__isq__global_finalize"() : ()->() 
        return 
    } 
}
