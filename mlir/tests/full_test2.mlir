// This file is generated by the isQ Experimental compiler
// Source file name: main.isq
module @isq_builtin {
    isq.declare_qop @measure : [1]()->i1
    isq.declare_qop @reset : [1]()->()
}
func @printInt(%a: index)->(){
    return
}
isq.defgate @X {definition = [{type="unitary", value = [[#isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>], [#isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>]] }]}: !isq.gate<1> loc("main.isq":1:1)
isq.defgate @H {definition = [{type="unitary", value = [[#isq.complex<0.7071067811865476, 0.0>, #isq.complex<0.7071067811865476, 0.0>], [#isq.complex<0.7071067811865476, 0.0>, #isq.complex<-0.7071067811865476, -0.0>]] }]}: !isq.gate<1> loc("main.isq":3:1)
func @main()->(){
    %t0 = memref.alloca() : memref<1x!isq.qstate> loc("main.isq":7:10)
    %t1 = arith.constant 0 : index loc("main.isq":7:10)
    %x0 = memref.subview %t0[%t1][1][1] : memref<1x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":7:10)
    %t2 = memref.alloca() : memref<1x!isq.qstate> loc("main.isq":7:13)
    %t3 = arith.constant 0 : index loc("main.isq":7:13)
    %x1 = memref.subview %t2[%t3][1][1] : memref<1x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":7:13)
    %t4 = isq.use @H : !isq.gate<1> loc("main.isq":8:5)
    %t5 = isq.decorate(%t4: !isq.gate<1>) {ctrl = [], adjoint = false} :!isq.gate<1> loc("main.isq":8:5)
    %t6 = affine.load %x1[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":8:5)
    %t7 = isq.apply %t5(%t6) : !isq.gate<1> loc("main.isq":8:5)
    affine.store %t7, %x1[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":8:5)
    %t8 = isq.use @X : !isq.gate<1> loc("main.isq":9:5)
    %t9 = isq.decorate(%t8: !isq.gate<1>) {ctrl = [true], adjoint = false} :!isq.gate<2> loc("main.isq":9:5)
    %t10 = affine.load %x0[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":9:5)
    %t11 = affine.load %x1[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":9:5)
    %t12,%t13 = isq.apply %t9(%t10,%t11) : !isq.gate<2> loc("main.isq":9:5)
    affine.store %t12, %x0[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":9:5)
    affine.store %t13, %x1[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":9:5)
    %t14 = memref.alloca() : memref<1xindex> loc("main.isq":10:9)
    %t15 = arith.constant 0 : index loc("main.isq":10:9)
    %x2 = memref.subview %t14[%t15][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":10:9)
    %t16 = memref.alloca() : memref<1xindex> loc("main.isq":10:13)
    %t17 = arith.constant 0 : index loc("main.isq":10:13)
    %x3 = memref.subview %t16[%t17][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":10:13)
    %t18 = affine.load %x0[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":11:8)
    %t19, %t20 = isq.call_qop @isq_builtin::@measure(%t18): [1]()->i1 loc("main.isq":11:8)
    affine.store %t19, %x0[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":11:8)
    %x4 = arith.index_cast %t20 : i1 to index loc("main.isq":11:8)
    affine.store %x4, %x2[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":11:5)
    %t21 = affine.load %x1[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":12:8)
    %t22, %t23 = isq.call_qop @isq_builtin::@measure(%t21): [1]()->i1 loc("main.isq":12:8)
    affine.store %t22, %x1[0] : memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":12:8)
    %x5 = arith.index_cast %t23 : i1 to index loc("main.isq":12:8)
    affine.store %x5, %x3[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":12:5)
    %x6 = affine.load %x2[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":13:11)
    call @printInt(%x6): (index)->() loc("main.isq":13:5)
    %x7 = affine.load %x3[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":14:11)
    call @printInt(%x7): (index)->() loc("main.isq":14:5)
    return
}
