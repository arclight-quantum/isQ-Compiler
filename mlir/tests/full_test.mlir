isq.defgate @Rs {definition = [{type="unitary", value = [[#isq.complex<0.5, 0.8660254>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>]] }]}: !isq.gate<2> loc("main.isq":1:1)
isq.defgate @Rs2 {definition = [{type="unitary", value = [[#isq.complex<0.5, -0.8660254>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>]] }]}: !isq.gate<2> loc("main.isq":5:1)
isq.defgate @Rt {definition = [{type="unitary", value = [[#isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.5, 0.8660254>]] }]}: !isq.gate<2> loc("main.isq":10:1)
isq.defgate @Rt2 {definition = [{type="unitary", value = [[#isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.5, -0.8660254>]] }]}: !isq.gate<2> loc("main.isq":14:1)
isq.defgate @CNOT {definition = [{type="unitary", value = [[#isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>], [#isq.complex<0.0, 0.0>, #isq.complex<0.0, 0.0>, #isq.complex<1.0, 0.0>, #isq.complex<0.0, 0.0>]] }]}: !isq.gate<2> loc("main.isq":18:1)
isq.defgate @H {definition = [{type="unitary", value = [[#isq.complex<0.5, 0.8660254>, #isq.complex<0.5, 0.8660254>], [#isq.complex<0.5, 0.8660254>, #isq.complex<0.5, -0.8660254>]] }]}: !isq.gate<1> loc("main.isq":22:1)
memref.global @a : memref<1xindex> = uninitialized loc("main.isq":31:5)
memref.global @a : memref<1xindex> = uninitialized loc("main.isq":31:5)
memref.global @b : memref<1xindex> = uninitialized loc("main.isq":31:8)
memref.global @b : memref<1xindex> = uninitialized loc("main.isq":31:8)
memref.global @c : memref<1xindex> = uninitialized loc("main.isq":31:11)
memref.global @c : memref<1xindex> = uninitialized loc("main.isq":31:11)
memref.global @q : memref<3x!isq.qstate> = uninitialized loc("main.isq":32:6)
memref.global @q : memref<3x!isq.qstate> = uninitialized loc("main.isq":32:6)
memref.global @p : memref<1x!isq.qstate> = uninitialized loc("main.isq":32:12)
memref.global @p : memref<1x!isq.qstate> = uninitialized loc("main.isq":32:12)
func @test(%x5: memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>>, %x6: memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>>, %t16: index)->index{
    %t17 = memref.alloca() : memref<1xindex> loc("main.isq":34:1)
    affine.store %t16, %t17[0] : memref<1xindex> loc("main.isq":34:1)
    %t18 = arith.constant 0 : index loc("main.isq":34:1)
    %x7 = memref.subview %t17[%t18][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":34:1)
    %t0 = isq.use @H : !isq.gate<1> loc("main.isq":35:9)
    %t1 = isq.decorate(%t0: !isq.gate<1>) {ctrl = [], adjoint = false} :!isq.gate<1> loc("main.isq":35:9)
    %t2 = affine.load %x5[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":35:9)
    %t3 = isq.apply %t1(%t2) : !isq.gate<1> loc("main.isq":35:9)
    affine.store %t3, %x5[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":35:9)
    %t4 = memref.alloca() : memref<1x!isq.qstate> loc("main.isq":36:14)
    %t5 = arith.constant 0 : index loc("main.isq":36:14)
    %x8 = memref.subview %t4[%t5][1][1] : memref<1x!isq.qstate> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":36:14)
    %t6 = isq.use @CNOT : !isq.gate<2> loc("main.isq":37:9)
    %t7 = isq.decorate(%t6: !isq.gate<2>) {ctrl = [], adjoint = false} :!isq.gate<2> loc("main.isq":37:9)
    %t8 = affine.load %x8[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":37:9)
    %t9 = affine.load %x5[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":37:9)
    %t10,%t11 = isq.apply %t7(%t8,%t9) : !isq.gate<2> loc("main.isq":37:9)
    affine.store %t10, %x8[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":37:9)
    affine.store %t11, %x5[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":37:9)
    %t12 = isq.use @H : !isq.gate<1> loc("main.isq":38:9)
    %t13 = isq.decorate(%t12: !isq.gate<1>) {ctrl = [], adjoint = false} :!isq.gate<1> loc("main.isq":38:9)
    %t14 = affine.load %x5[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":38:9)
    %t15 = isq.apply %t13(%t14) : !isq.gate<1> loc("main.isq":38:9)
    affine.store %t15, %x5[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":38:9)
    %x9 = arith.constant 2 : index loc("main.isq":39:16)
    return %x9 : index loc("main.isq":39:9)
}
func @test2(%x10: memref<?x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>>, %t23: index)->(){
    %t24 = memref.alloca() : memref<1xindex> loc("main.isq":42:1)
    affine.store %t23, %t24[0] : memref<1xindex> loc("main.isq":42:1)
    %t25 = arith.constant 0 : index loc("main.isq":42:1)
    %x11 = memref.subview %t24[%t25][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":42:1)
    %x12 = affine.load %x11[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":43:13)
    %x13 = memref.subview %x10[%x12][1][1] : memref<?x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":43:11)
    %t19 = isq.use @H : !isq.gate<1> loc("main.isq":43:9)
    %t20 = isq.decorate(%t19: !isq.gate<1>) {ctrl = [], adjoint = false} :!isq.gate<1> loc("main.isq":43:9)
    %t21 = affine.load %x13[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":43:9)
    %t22 = isq.apply %t20(%t21) : !isq.gate<1> loc("main.isq":43:9)
    affine.store %t22, %x13[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":43:9)
    return
}
func @main()->(){
    %t26 = memref.alloca() : memref<1xindex> loc("main.isq":48:13)
    %t27 = arith.constant 0 : index loc("main.isq":48:13)
    %x14 = memref.subview %t26[%t27][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":48:13)
    %t28 = memref.alloca() : memref<1xindex> loc("main.isq":49:13)
    %t29 = arith.constant 0 : index loc("main.isq":49:13)
    %x15 = memref.subview %t28[%t29][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":49:13)
    %x16 = arith.constant 1 : index loc("main.isq":50:13)
    %x17 = arith.constant 2 : index loc("main.isq":50:17)
    %t30 = arith.cmpi "slt", %x17, %x18 : index loc("main.isq":50:12)
    %x16 = arith.index_cast %t30: i1 to index loc("main.isq":50:12)
    affine.if affine_set<(d0): (d0-1>=0)>(%x18) {
        %x19 = affine.load %x0[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":51:22)
        %x20 = arith.constant 3 : index loc("main.isq":51:24)
        %x21 = arith.constant 2 : index loc("main.isq":51:26)
        %x20 = arith.muli %x21, %x22 : index loc("main.isq":51:24)
        %x19 = arith.addi %x22, %x23 : index loc("main.isq":51:21)
        %x24 = affine.load %x1[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":51:30)
        %x25 = affine.load %x2[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":51:32)
        %x24 = arith.addi %x25, %x26 : index loc("main.isq":51:29)
        %x23 = arith.muli %x26, %x27 : index loc("main.isq":51:21)
        affine.store %x27, %x14[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":51:17)
    } else {
        %t31 = memref.alloca() : memref<1xindex> loc("main.isq":53:21)
        %t32 = arith.constant 0 : index loc("main.isq":53:21)
        %x28 = memref.subview %t31[%t32][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":53:21)
        %x29 = affine.load %x2[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":54:21)
        %x30 = arith.constant 1 : index loc("main.isq":54:23)
        %x29 = arith.addi %x30, %x31 : index loc("main.isq":54:21)
        affine.store %x31, %x28[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":54:17)
    } loc("main.isq":50:9)
    %x32 = arith.constant 1 : index loc("main.isq":56:18)
    %x33 = affine.load %x1[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":56:23)
    affine.for %t33 = %x32 to %x33 step 1 {
    %t34 = memref.alloca() : memref<1xindex> loc("main.isq":56:9)
    %t35 = arith.constant 0 : index loc("main.isq":56:9)
    %x34 = memref.subview %t34[%t35][1][1] : memref<1xindex> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":56:9)
    affine.store %t33, %x34[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":56:9)
        isq.pass loc("main.isq":57:17)
    } loc("main.isq":56:9)
    %t36 = memref.alloca() : memref<5xindex> loc("main.isq":59:13)
    %t37 = arith.constant 0 : index loc("main.isq":59:13)
    %x35 = memref.subview %t36[%t37][5][1] : memref<5xindex> to memref<5xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":59:13)
    %x36 = affine.load %x2[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":60:15)
    %x37 = memref.subview %x35[%x36][1][1] : memref<5xindex, affine_map<(d0)[s0]->(d0+s0)>> to memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":60:13)
    %x38 = affine.load %x37[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":60:13)
    %x39 = arith.constant 2 : index loc("main.isq":60:18)
    %x38 = arith.addi %x39, %x40 : index loc("main.isq":60:13)
    affine.store %x40, %x0[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":60:9)
    %x41 = affine.load %x14[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":61:20)
    %x42 = call @test(x4, x4, x41) : (memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>>, memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>>, index)->index loc("main.isq":61:9)
    affine.store %x42, %x1[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":61:5)
    %x43 = arith.constant 0 : index loc("main.isq":62:17)
    %t38 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":62:15)
    %t39 = arith.constant 0 : index loc("main.isq":62:15)
    %t40 = memref.subview %t38[%t39][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":62:15)
    %x44 = memref.subview %t38[%x43][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":62:15)
    %t41 = affine.load %x44[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":62:13)
    %t42, %t43 = isq.call_qop @isq_builtin::@measure(%t41): [1]()->i1 loc("main.isq":62:13)
    affine.store %t42, %x44[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":62:13)
    %x45 = arith.index_cast %t43 : i1 to index loc("main.isq":62:13)
    affine.store %x44, %x0[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":62:9)
    %x46 = arith.constant 0 : index loc("main.isq":63:19)
    %t44 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":63:17)
    %t45 = arith.constant 0 : index loc("main.isq":63:17)
    %t46 = memref.subview %t44[%t45][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":63:17)
    %x47 = memref.subview %t44[%x46][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":63:17)
    %t47 = isq.use @CNOT : !isq.gate<2> loc("main.isq":63:9)
    %t48 = isq.decorate(%t47: !isq.gate<2>) {ctrl = [], adjoint = false} :!isq.gate<2> loc("main.isq":63:9)
    %t49 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":63:9)
    %t50 = affine.load %x47[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":63:9)
    %t51,%t52 = isq.apply %t48(%t49,%t50) : !isq.gate<2> loc("main.isq":63:9)
    affine.store %t51, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":63:9)
    affine.store %t52, %x47[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":63:9)
    %x48 = arith.constant 0 : index loc("main.isq":65:25)
    %t53 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":65:23)
    %t54 = arith.constant 0 : index loc("main.isq":65:23)
    %t55 = memref.subview %t53[%t54][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:23)
    %x49 = memref.subview %t53[%x48][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:23)
    %x50 = arith.constant 1 : index loc("main.isq":65:31)
    %t56 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":65:29)
    %t57 = arith.constant 0 : index loc("main.isq":65:29)
    %t58 = memref.subview %t56[%t57][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:29)
    %x51 = memref.subview %t56[%x50][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:29)
    %t59 = isq.use @H : !isq.gate<3> loc("main.isq":65:9)
    %t60 = isq.decorate(%t59: !isq.gate<3>) {ctrl = [true, true], adjoint = true} :!isq.gate<5> loc("main.isq":65:9)
    %t61 = affine.load %x49[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:9)
    %t62 = affine.load %x51[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:9)
    %t63 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:9)
    %t64,%t65,%t66 = isq.apply %t60(%t61,%t62,%t63) : !isq.gate<3> loc("main.isq":65:9)
    affine.store %t64, %x49[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:9)
    affine.store %t65, %x51[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:9)
    affine.store %t66, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":65:9)
    %x52 = arith.constant 1 : index loc("main.isq":66:21)
    %t67 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":66:19)
    %t68 = arith.constant 0 : index loc("main.isq":66:19)
    %t69 = memref.subview %t67[%t68][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:19)
    %x53 = memref.subview %t67[%x52][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:19)
    %x54 = arith.constant 0 : index loc("main.isq":66:27)
    %t70 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":66:25)
    %t71 = arith.constant 0 : index loc("main.isq":66:25)
    %t72 = memref.subview %t70[%t71][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:25)
    %x55 = memref.subview %t70[%x54][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:25)
    %t73 = isq.use @H : !isq.gate<3> loc("main.isq":66:9)
    %t74 = isq.decorate(%t73: !isq.gate<3>) {ctrl = [true, true], adjoint = false} :!isq.gate<5> loc("main.isq":66:9)
    %t75 = affine.load %x53[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:9)
    %t76 = affine.load %x55[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:9)
    %t77 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:9)
    %t78,%t79,%t80 = isq.apply %t74(%t75,%t76,%t77) : !isq.gate<3> loc("main.isq":66:9)
    affine.store %t78, %x53[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:9)
    affine.store %t79, %x55[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:9)
    affine.store %t80, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":66:9)
    %x56 = arith.constant 0 : index loc("main.isq":67:23)
    %t81 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":67:21)
    %t82 = arith.constant 0 : index loc("main.isq":67:21)
    %t83 = memref.subview %t81[%t82][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":67:21)
    %x57 = memref.subview %t81[%x56][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":67:21)
    %t84 = isq.use @H : !isq.gate<2> loc("main.isq":67:9)
    %t85 = isq.decorate(%t84: !isq.gate<2>) {ctrl = [false], adjoint = true} :!isq.gate<3> loc("main.isq":67:9)
    %t86 = affine.load %x57[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":67:9)
    %t87 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":67:9)
    %t88,%t89 = isq.apply %t85(%t86,%t87) : !isq.gate<2> loc("main.isq":67:9)
    affine.store %t88, %x57[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":67:9)
    affine.store %t89, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":67:9)
    %x58 = arith.constant 0 : index loc("main.isq":68:31)
    %t90 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":68:29)
    %t91 = arith.constant 0 : index loc("main.isq":68:29)
    %t92 = memref.subview %t90[%t91][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:29)
    %x59 = memref.subview %t90[%x58][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:29)
    %x60 = arith.constant 1 : index loc("main.isq":68:37)
    %t93 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":68:35)
    %t94 = arith.constant 0 : index loc("main.isq":68:35)
    %t95 = memref.subview %t93[%t94][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:35)
    %x61 = memref.subview %t93[%x60][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:35)
    %x62 = arith.constant 2 : index loc("main.isq":68:43)
    %t96 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":68:41)
    %t97 = arith.constant 0 : index loc("main.isq":68:41)
    %t98 = memref.subview %t96[%t97][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:41)
    %x63 = memref.subview %t96[%x62][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:41)
    %t99 = isq.use @H : !isq.gate<4> loc("main.isq":68:9)
    %t100 = isq.decorate(%t99: !isq.gate<4>) {ctrl = [true, false, false], adjoint = true} :!isq.gate<7> loc("main.isq":68:9)
    %t101 = affine.load %x59[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    %t102 = affine.load %x61[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    %t103 = affine.load %x63[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    %t104 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    %t105,%t106,%t107,%t108 = isq.apply %t100(%t101,%t102,%t103,%t104) : !isq.gate<4> loc("main.isq":68:9)
    affine.store %t105, %x59[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    affine.store %t106, %x61[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    affine.store %t107, %x63[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    affine.store %t108, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":68:9)
    %x64 = arith.constant 0 : index loc("main.isq":69:26)
    %t109 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":69:24)
    %t110 = arith.constant 0 : index loc("main.isq":69:24)
    %t111 = memref.subview %t109[%t110][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:24)
    %x65 = memref.subview %t109[%x64][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:24)
    %x66 = arith.constant 2 : index loc("main.isq":69:32)
    %t112 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":69:30)
    %t113 = arith.constant 0 : index loc("main.isq":69:30)
    %t114 = memref.subview %t112[%t113][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:30)
    %x67 = memref.subview %t112[%x66][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:30)
    %x68 = arith.constant 1 : index loc("main.isq":69:41)
    %t115 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":69:39)
    %t116 = arith.constant 0 : index loc("main.isq":69:39)
    %t117 = memref.subview %t115[%t116][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:39)
    %x69 = memref.subview %t115[%x68][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:39)
    %t118 = isq.use @Rt2 : !isq.gate<4> loc("main.isq":69:9)
    %t119 = isq.decorate(%t118: !isq.gate<4>) {ctrl = [false, true], adjoint = false} :!isq.gate<6> loc("main.isq":69:9)
    %t120 = affine.load %x65[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    %t121 = affine.load %x67[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    %t122 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    %t123 = affine.load %x69[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    %t124,%t125,%t126,%t127 = isq.apply %t119(%t120,%t121,%t122,%t123) : !isq.gate<4> loc("main.isq":69:9)
    affine.store %t124, %x65[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    affine.store %t125, %x67[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    affine.store %t126, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    affine.store %t127, %x69[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":69:9)
    scf.while () : ()->(){
        %x70 = affine.load %x0[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":71:16)
        %x71 = arith.constant 2 : index loc("main.isq":71:20)
        %t128 = arith.cmpi "slt", %x71, %x72 : index loc("main.isq":71:16)
        %x70 = arith.index_cast %t128: i1 to index loc("main.isq":71:16)
        %t129 = arith.index_cast %x72 : index to i1 loc("main.isq":71:9)
        scf.condition(%t129) loc("main.isq":71:9)
    } do {
        %x73 = affine.load %x0[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":72:21)
        %x74 = arith.constant 1 : index loc("main.isq":72:25)
        %x73 = arith.addi %x74, %x75 : index loc("main.isq":72:21)
        affine.store %x75, %x0[0]: memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":72:17)
        scf.yield
    } loc("main.isq":71:9)
    %x76 = affine.load %x0[0] : memref<1xindex, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":75:15)
    call @isq_print(%x76): (index)->() loc("main.isq":75:9)
    %t130 = affine.load %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":76:9)
    %t131 = isq.call_qop @isq_builtin::@reset(%t130): [1]()->() loc("main.isq":76:9)
    affine.store %t131, %x4[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":76:9)
    %x77 = arith.constant 1 : index loc("main.isq":77:11)
    %t132 = memref.get_global @q : memref<3x!isq.qstate> loc("main.isq":77:9)
    %t133 = arith.constant 0 : index loc("main.isq":77:9)
    %t134 = memref.subview %t132[%t133][3][1] : memref<3x!isq.qstate> to memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":77:9)
    %x78 = memref.subview %t132[%x77][1][1] : memref<3x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> to memref<1x!isq.qstate, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":77:9)
    %t135 = affine.load %x78[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":77:9)
    %t136 = isq.call_qop @isq_builtin::@reset(%t135): [1]()->() loc("main.isq":77:9)
    affine.store %t136, %x78[0] : memref<1x!isq.qubit, affine_map<(d0)[s0]->(d0+s0)>> loc("main.isq":77:9)
    return
}