cmake_minimum_required(VERSION 3.16)
project(quantum_ir)
option(BUILD_DOC "Build documentation" ON)
message(STATUS "QIR")
# SET(CMAKE_BUILD_TYPE "Release")
set (CMAKE_CXX_STANDARD 17)
add_compile_options(-fno-rtti)
find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
find_package(MLIR REQUIRED CONFIG)
message(STATUS "Found MLIR ${MLIR_PACKAGE_VERSION}")
message(STATUS "Using MLIRConfig.cmake in: ${MLIR_DIR}")
set(CMAKE_MODULE_PATH ${LLVM_CMAKE_DIR} ${MLIR_CMAKE_DIR} ${PROJECT_SOURCE_DIR}/cmake ${PROJECT_SOURCE_DIR}/vendor/eigen/cmake)
#include(UseGold)
# Find Eigen
set(ENV{EIGEN3_ROOT} ${PROJECT_SOURCE_DIR}/vendor/eigen)
find_package(Eigen3 REQUIRED 3.4.0)
include(AddLLVM)
include(TableGen)
include(AddMLIR)
include_directories(${LLVM_INCLUDE_DIRS} ${MLIR_INCLUDE_DIRS} "include")
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include/ ${EIGEN3_INCLUDE_DIR})
add_subdirectory(include)
add_definitions(${LLVM_DEFINITIONS})
add_subdirectory(lib)
get_property(mlir_libs GLOBAL PROPERTY MLIR_ALL_LIBS)
add_subdirectory(tools)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")
add_custom_target(qir-doc ALL)
add_dependencies(qir-doc mlir-dialect-doc)
if (BUILD_DOC)
add_subdirectory(docs)
endif (BUILD_DOC)
# add_subdirectory(frontends)