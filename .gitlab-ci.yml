stages:
  - build
  - test
  - deploy
variables:
  CI_DEPLOY_DEBUG: "true"

build:
  stage: build
  script:
    - make lock
    - nix build
  artifacts:
    paths:
      - result
      
sanity test:
  stage: test
  rules:
    - if: $CI_DEPLOY_DEBUG != "true"
  script:
    - export ISQ_ROOT=`pwd`/result
    - export MLIR_ROOT=`pwd`/result
    - result/bin/isqc run examples/bell.isq

frontend test:
  stage: test
  rules:
    - if: $CI_DEPLOY_DEBUG != "true"
  script:
    - cd frontend
    - nix develop -c make configure build test

integration test:
  stage: test
  rules:
    - if: $CI_DEPLOY_DEBUG != "true"
  script:
    - export ISQ_ROOT=`pwd`/result
    - export MLIR_ROOT=`pwd`/result
    - cd isqc
    - nix develop -c cargo test
  dependencies:
    - build
    - sanity test
    - frontend test

# Create new "release/${MAJOR}.${MINOR}.x" branch for minor version.
# Invoked when pushing to main.
bump major or minor version:
  stage: deploy
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && ($CI_PIPELINE_SOURCE == "push")
      changes:
        - 'version.json'
    - if: $CI_DEPLOY_DEBUG == "true" && $CI_PIPELINE_SOURCE != "merge_request_event"
  script:
    - nix develop -c ./scripts/ci/init_git.sh
    - nix develop -c ./scripts/ci/release_branch.sh

# Create new tag "v${MAJOR}.${MINOR}.${PATCH}" for version.
# Invoked when pushing to release branch.
bump patch version:
  stage: deploy
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release.*/) && ($CI_PIPELINE_SOURCE == "push")
      changes:
        - 'version.json'
  script:
    - nix develop -c ./scripts/ci/init_git.sh
    - nix develop -c ./scripts/freeze-version.py
    - nix develop -c ./scripts/ci/bump_tag.sh

deploy main branch doc:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - nix develop -c ./scripts/ci/init_git.sh
    - cd docs
    - git fetch origin gh-pages --depth=1
    - nix develop -c mike deploy --rebase latest
    - git push origin-push gh-pages
  
# Deploy a tagged version. Upload.
deploy tagged version:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: build
      artifacts: true
  script:
    # Build tarball
    - nix build .#isqcTarball -o release
    # Upload docs
    - nix develop -c ./scripts/ci/init_git.sh
    - cd docs
    - git fetch origin gh-pages --depth=1 || true
    - nix develop -c mike deploy --rebase $CI_COMMIT_TAG
    - git push origin-push gh-pages
  artifacts:
    paths:
      - release/isqc-${CI_COMMIT_TAG}.tar.gz
  release:
    name: 'isQ Release $CI_COMMIT_TAG'
    description: 'Standalone version that can be use without Nix.'
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Linux x86_64'
          url: '${CI_SERVER_PROTOCOL}://${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/cw/-/jobs/${CI_JOB_ID}/artifacts/file/release/isqc-${CI_COMMIT_TAG}.tar.gz'