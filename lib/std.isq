extern defgate Rz(double) : gate(1) = "__quantum__qis__rz__body";
extern defgate Rx(double) : gate(1) = "__quantum__qis__rx__body";
extern defgate Ry(double) : gate(1) = "__quantum__qis__ry__body";
extern defgate U3(double, double, double) : gate(1) = "__quantum__qis__u3";
extern defgate H() : gate(1) = "__quantum__qis__h__body";
extern defgate S() : gate(1) = "__quantum__qis__s__body";
extern defgate T() : gate(1) = "__quantum__qis__t__body";
extern defgate X() : gate(1) = "__quantum__qis__x__body";
extern defgate Y() : gate(1) = "__quantum__qis__y__body";
extern defgate Z() : gate(1) = "__quantum__qis__z__body";
extern defgate CNOT() : gate(2) = "__quantum__qis__cnot";
extern defgate Toffoli() : gate(3) = "__quantum__qis__toffoli";
extern defgate X2M() : gate(1) = "__quantum__qis__x2m";
extern defgate X2P() : gate(1) = "__quantum__qis__x2p";
extern defgate Y2M() : gate(1) = "__quantum__qis__y2m";
extern defgate Y2P() : gate(1) = "__quantum__qis__y2p";
extern defgate CZ() : gate(2) = "__quantum__qis__cz";
extern defgate GPhase(double) : gate(0) = "__quantum__qis__gphase";

procedure __add(qbit a[], qbit b[])
{
    int len = a.length;
    CNOT(a[1:len], b[1:]);
    for i in 1 : len - 1 {
        CNOT(a[len - i - 1], a[len - i]);
    }
    Toffoli(a[0:], b, a[1:len]);
    int i = len - 1;
    while (i > 0) {
        CNOT(a[i], b[i]);
        Toffoli(a[i - 1], b[i - 1], a[i]);
        i = i - 1;
    }
    CNOT(a[1:], a[2:len]);
    CNOT(a, b);
}

procedure __sub(qbit a[], qbit b[])
{
    int len = a.length;
    CNOT(a, b);
    for i in 1 : len - 1 {
        CNOT(a[len - i - 1], a[len - i]);
    }
    for i in 1 : len {
        Toffoli(a[i - 1], b[i - 1], a[i]);
        CNOT(a[i], b[i]);
    }
    for i in 1 : len {
        Toffoli(a[len - i - 1], b[len - i - 1], a[len - i]);
    }
    CNOT(a[1:], a[2:len]);
    CNOT(a[1:len], b[1:]);
}
