/*
* This example is based on paper:
*   Gushu Li, Li Zhou, et al. "Projection-Based Runtime Assertions 
* for Testing and DebuggingQuantum Programs", OOPSLA, 2020.
*/
import std;
import qft;

/*
* The Shor's algorithm of decomposing 15.
*
* Select x = 11 and calculate r where x^r = 1 (mod 15).
*
* Note that x^0 = 0001b (mod 15), x^1 = 1011b (mod 15), where the lowest
* and third lowest bit are constant (0 and 1, respectively). Therefore, they
* are not shown in the circuit. Thus, the modular exponentiation gate is
* simplified to two CNOT gates.
*/
procedure main()
{
    qbit q[5];
    H(q[:3]);
    assert q[:3] in span([1, 1, 1, 1, 1, 1, 1, 1]);

    // 11^a (mod 15)
    CNOT(q[2], q[3]);
    CNOT(q[2], q[4]);
    assert q[:2] in span([1, 1, 1, 1]);
    assert q[2:5] in span([1, 0, 0, 0, 0, 0, 0, 1]);

    qft_inv(q[2:-1:-1]);
    assert q[:3] in span(|0>, |1>);
    assert q[3:5] in span(|0>, |3>);

    print M(q[:3]);    // should be either 0 or 1
}